/* PDAP:PDTREE package for Mesquite  copyright 2001-2009 P. Midford & W. MaddisonPDAP:PDTREE is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.The web site for PDAP:PDTREE is http://mesquiteproject.org/pdap_mesquite/This source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html) */package mesquite.pdap.ScatterDiagnostics;import java.awt.*;import java.util.List;import java.util.ArrayList;import mesquite.lib.*;import mesquite.lib.duties.*;import mesquite.lib.ui.ChartExtra;import mesquite.lib.ui.Charter;import mesquite.lib.ui.MesquiteChart;/** * This module may be obsolete * @author peter * */public class ScatterDiagnostics extends ScattergramAssistantA  {    final List<ChartExtra> extras = new ArrayList<ChartExtra>();    public boolean startJob(String arguments, Object condition, boolean hiredByName) {        return true;    }    public ChartExtra createExtra(MesquiteChart chart){        ChartExtra s =  new ScatterDiagnosticsExtra(this, chart);        extras.add(s);        return s;    }    public void endJob(){        for (int i=0; i<extras.size(); i++){            if (extras.get(i) != null){                ChartExtra extra = (ChartExtra)extras.get(i);                extra.turnOff();            }            else                MesquiteMessage.warnProgrammer("Found a null entry in the list of chartExtras of the ScatterDiagnostics while ending");        }    }    public String getName(){        return "Scattergram Diagnostics";    }    public boolean isPrerelease(){        return false;    }    /*.................................................................................................................*/    public String getVersion() {        return "1.15";    }}class ScatterDiagnosticsExtra extends ChartExtra {    double meanX, meanY;    public ScatterDiagnosticsExtra(MesquiteModule ownerModule, MesquiteChart chart){        super(ownerModule, chart);    }    /**Do any calculations needed*/    public boolean doCalculations(){        // here you can put the main calculations.          meanX = MesquiteDouble.unassigned;        meanY = MesquiteDouble.unassigned;        if (chart!=null){            NumberArray xValues = chart.getXArray();            int count = 0;            double sum = 0;            for (int i = 0; i< xValues.getNumParts(); i++){                if (xValues.isCombinable(i)){                    count++;                    sum += xValues.getDouble(i);                }            }            if (count>0)                meanX = sum/count;            NumberArray yValues = chart.getYArray();            count = 0;            sum = 0;            for (int i = 0; i< yValues.getNumParts(); i++){                if (yValues.isCombinable(i)){                    count++;                    sum += yValues.getDouble(i);                }            }            if (count>0)                meanY = sum/count;        }        return false;    }    /**draw on the chart*/    public void drawOnChart(Graphics g){        Charter c = chart.getCharter();        g.drawLine(c.xToPixel(0,chart), c.yToPixel(0,chart),c.xToPixel(10,chart), c.yToPixel(10,chart));    }    /**print on the chart*/    public void printOnChart(Graphics g){        drawOnChart(g);    }    public String writeOnChart(){        return "Mean value on X: "+ MesquiteDouble.toString(meanX) + "\n" + "Mean value on Y: " + MesquiteDouble.toString(meanY) ;    }    /**to inform ChartExtra that cursor has just entered point*/    public void cursorEnterPoint(int point, int exactPoint, Graphics g){        //Debugg.println("enter point " + point);    }    /**to inform ChartExtra that cursor has just exited point*/    public void cursorExitPoint(int point, int exactPoint, Graphics g){        //Debugg.println("exit point " + point);    }    /**to inform ChartExtra that cursor has just touched point*/    public void cursorTouchPoint(int point, int exactPoint, Graphics g){        //Debugg.println("touch point " + point);    }}