/* PDAP:PDTREE package for Mesquite  copyright 2001-2009 P. Midford & W. MaddisonPDAP:PDTREE is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.The web site for PDAP:PDTREE is http://mesquiteproject.org/pdap_mesquite/This source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)PDAP reporter dialog is based on the Mesquite Exporter Dialog, */package mesquite.pdap.lib;import java.awt.*;import mesquite.lib.*;/*===============================================*//** Report Options dialog box class*/public class PDAPReporterDialog extends ExtensibleDialog {	PDAPFileReporter fileReporter;	static final String reportString = "Write";	static final String cancelString = "Cancel";	Choice reportDelimiter;	Choice tableDelimiter;    Checkbox convertSpacesCheckBox;	Checkbox writeOnlySelectedDataCheckBox;	Checkbox writeOnlySelectedTaxaCheckBox;		/**	 * 	 * @param fileReporter an output file reporter that 'owns' this dialog	 * @param parent containing window for display placement purposes	 * @param title of the displayed dialog window	 * @param buttonPressed will hold the index specifying which button was selected to exit the dialog	 */	public PDAPReporterDialog (PDAPFileReporter fileReporter, MesquiteWindow parent, String title, MesquiteInteger buttonPressed) {		super(parent, title, buttonPressed);		this.fileReporter = fileReporter;		setDefaultButton(reportString);	}	/*.................................................................................................................*/	/**      * This method adds a pop-up list of end of line delimiters to the dialog box.  Mesquite	 * currently supports Mac, Windows, and Unix delimiters, with the default being the choice	 * appropriate for the current system.     */	public void addLineEndPopUpPanel () {		reportDelimiter = addPopUpMenu("End of line character:", "Current System Default","MacOS (CR)","Windows (CR+LF)","UNIX (LF)",fileReporter.lineDelimiter);	}	/**      * This method adds a pop-up list of table entry delimiters to the dialog box.	 */	public void addTableDelimiterPopUpPanel() {		tableDelimiter = addPopUpMenu("Table entry delimiters:", "Tab", "Comma", "Space", "NewLine",fileReporter.tableDelimiter);	}		/**	 * This method adds a check box allowing the user to choose to convert spaces to '_' characters	 */    public void addSpaceConversionCheckBox(){        convertSpacesCheckBox = this.addCheckBox("Convert spaces to underscore ('_') in node names", fileReporter.convertSpaces);    }    	/*.................................................................................................................*/	/** This method handles setting up the panels for the dialog box.  This is the long form, with	 * all the toggles passed in.     */	public void addDefaultPanels (boolean dataSelected, boolean taxaSelected, boolean hasTables) {		fileReporter.writeOnlySelectedTaxa = false;		fileReporter.writeOnlySelectedData = false;        fileReporter.convertSpaces = true;		if (dataSelected) 			 writeOnlySelectedDataCheckBox = this.addCheckBox("write only selected data", fileReporter.writeOnlySelectedData);		else			writeOnlySelectedDataCheckBox = new Checkbox();					if (taxaSelected) 			 writeOnlySelectedTaxaCheckBox = this.addCheckBox("write only selected taxa", fileReporter.writeOnlySelectedTaxa);		else			writeOnlySelectedTaxaCheckBox = new Checkbox();		if (hasTables)			addTableDelimiterPopUpPanel();		addLineEndPopUpPanel();        addSpaceConversionCheckBox();		addPrimaryButtonRow(reportString, cancelString);		prepareAndDisplayDialog();	}	/*.................................................................................................................*/	/** This version has no passed toggles, so to decide whether to ask about table delimiters	    it queries the reporter.	*/	public void addDefaultPanels() {		if (fileReporter.hasTables())			addTableDelimiterPopUpPanel();		addLineEndPopUpPanel();        addSpaceConversionCheckBox();		addPrimaryButtonRow(reportString, cancelString);		prepareAndDisplayDialog();	}		/*.................................................................................................................*/	/**	 * If the 'report' button is hit, first call the parent method, then update the line and table delimiters	 * @param buttonLabel label of selected button	 * @param button the actual button	 */	public void buttonHit(String buttonLabel, Button button) {		super.buttonHit(buttonLabel, button);		if (buttonLabel.equalsIgnoreCase(reportString)) {			fileReporter.lineDelimiter = reportDelimiter.getSelectedIndex();			fileReporter.tableDelimiter = tableDelimiter.getSelectedIndex();		}	}	/*.................................................................................................................*/	/**     * Simple query, just returns the index of the selected button w/o setting any fields	 * @return index of button	 */	public int query() {		return buttonPressed.getValue();	}	/*.................................................................................................................*/	/**	 * Updates class fields (as selected by parameters) then returns index of the selected button	 * @param dataSelected true if a set of columns (characters) were selected on entry	 * @param taxaSelected true if a set of rows (taxa) were selected	 * @param convertSpaces true if spaces should be converted to '_' characters (helpful for Excel exports)	 * @return index of button hit to close dialog	 */	public int query(boolean dataSelected, boolean taxaSelected,boolean convertSpaces) {		if (dataSelected) 			fileReporter.writeOnlySelectedData = writeOnlySelectedDataCheckBox.getState();		if (taxaSelected) 			fileReporter.writeOnlySelectedTaxa = writeOnlySelectedTaxaCheckBox.getState();		if (convertSpaces)            fileReporter.convertSpaces = convertSpacesCheckBox.getState();		return buttonPressed.getValue();	}}