/* PDAP:PDTREE package for Mesquite  copyright 2001-2009 P. Midford & W. MaddisonPDAP:PDTREE is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.The web site for PDAP:PDTREE is http://mesquiteproject.org/pdap_mesquite/This source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.pdap.lib;import java.awt.*;/* ======================================================================== */import mesquite.lib.*;import mesquite.lib.characters.CharacterDistribution;import mesquite.lib.tree.Tree;import mesquite.lib.ui.ColorTheme;public abstract class PDAPFileReporter extends MesquiteModule {	// copied from FileInterpreter - maybe make a common superclass?	public static final int CURRENTDELIMITER=0;	public static final int MACOSDELIMITER=1;	public static final int WINDOWSDELIMITER=2;	public static final int UNIXDELIMITER=3;	protected int lineDelimiter = CURRENTDELIMITER;		private static final String DIALOG_TITLE = "Export to file";		public boolean writeOnlySelectedData = false;	public boolean writeOnlySelectedTaxa = false;	// and two extensions...	public static final int TAB = 0;	public static final int COMMA = 1;	public static final int SPACE = 2;	public static final int NEWLINE = 3;	protected int tableDelimiter = TAB;   // we can change this default....    public boolean convertSpaces = true;  //convert spaces to '_' in tip names    //  it may be completely unnecessary to save the state of convertSpaces, but better safe...    private boolean savedConvertSpaces = true;     	public Class getDutyClass() {   	 	return PDAPFileReporter.class;   	} 	public String getDutyName() { 		return "Writes a PDAP report to a file";   	}/*.................................................................................................................*/	/** also borrowed from FileInterpreter */	public String getLineEnding() { 		if (lineDelimiter == CURRENTDELIMITER)  			return StringUtil.lineEnding(); 		else if (lineDelimiter == MACOSDELIMITER)  			return "\r"; 		else if (lineDelimiter == WINDOWSDELIMITER)  			return "\r\n"; 		else if (lineDelimiter == UNIXDELIMITER)  			return "\n"; 		return StringUtil.lineEnding();   	}   	    	public String getTableDelimiter() {   	 	switch (tableDelimiter) {   	 		case TAB: return("\t");   	 		case COMMA: return(",");   	 		case SPACE: return(" ");   	 		case NEWLINE: return getLineEnding();   	 	default: return "\t";   	 	}   	}       	 /*.................................................................................................................*/	protected String stripNex(String name) {		final String extension = ".nex";		final int extLen = extension.length(); 		if (name == null) 			return null; 		final int length = name.length(); 		if (length<extLen) 			return name; 		final String extSuffix = name.substring(length-extLen, length); 		if (extension.equalsIgnoreCase(extSuffix))  			return name.substring(0, length-extLen); 		else 			return name;   	 }   	 /*.................................................................................................................*/	/**	 * @param output	 * @param arguments	 * @param suggestedFileName	 */	public void saveReportFile(String output, String arguments, String suggestedFileName) {    //check arguments for filename and directory		String tempFileName=null;		String tempDirectoryName=null;   	 	String token = parser.getFirstToken(arguments);   	 	while (token !=null){   	 		if (token.equalsIgnoreCase("file")){   	 			parser.getNextToken(); // =   	 			tempFileName = parser.getNextToken();   	 		}   	 		else if (token.equalsIgnoreCase("directory")){   	 			parser.getNextToken(); // =   	 			tempDirectoryName = parser.getNextToken();   	 			if (tempDirectoryName != null && !tempDirectoryName.endsWith(MesquiteFile.fileSeparator)) //(tempDirectoryName.length()-1) != MesquiteFile.fileSeparator.charAt(0))   	 				tempDirectoryName += MesquiteFile.fileSeparator;   	 		}   	 		token = parser.getNextToken();   	 	}   	 	if (StringUtil.blank(tempFileName)){			MainThread.setShowWaitWindow(false);			FileDialog fdlg= new FileDialog(containerOfModule().getParentFrame(), DIALOG_TITLE, FileDialog.SAVE);   // Save File dialog box			if (suggestedFileName == null)				suggestedFileName = "untitled";			fdlg.setFile(suggestedFileName);						fdlg.setBackground(ColorTheme.getInterfaceBackground());			fdlg.setVisible(true);			tempFileName=fdlg.getFile();			tempDirectoryName=fdlg.getDirectory();			// fdlg.dispose();			MainThread.setShowWaitWindow(true);		}		if (!StringUtil.blank(tempFileName)) {			if (StringUtil.blank(tempDirectoryName))				tempDirectoryName = "";			logln("Writing report file to " + tempDirectoryName+tempFileName);			MesquiteFile.putFileContents(tempDirectoryName+tempFileName, output, true);		}	}        /**     * Converts space characters to underscores '_'     * @param nName String to convert, presumably the name of a node     * @return copy of nName with spaces converted     */    protected String spaceConvertString(String nName){        int spacePos = nName.indexOf(" ");        if (spacePos == -1)            return nName;        else {            StringBuffer workBuffer = new StringBuffer(nName);            while (spacePos != -1){                workBuffer.setCharAt(spacePos,'_');                spacePos = nName.indexOf(" ",spacePos+1);            }            return workBuffer.toString();        }    }        /**     * Saves state of convertSpaces before updating     * @param newValue assigned to convertSpaces     */    public void pushConvertSpaces(boolean newValue){        savedConvertSpaces = convertSpaces;        convertSpaces = newValue;    }        /**     * no need to return the value, just restore it     */    public void popConvertSpaces(){        convertSpaces = savedConvertSpaces;    }        /*........................................................................................*/    /**     * Specifies how to query a reporter whether its report contains tables (in case the user needs     * to be prompted for a table delimiter.     * @return true when reporter will generate tables     */    public abstract boolean hasTables();    /**     * Specifies how to write the file     * @param file     * @param data1     * @param data2     * @param theTree     * @param arguments     */  	public abstract void writeReport(MesquiteFile file, CharacterDistribution data1, CharacterDistribution data2, Tree theTree, String arguments);  	/**  	 *   	 * @param data1  	 * @param data2  	 * @param theTree  	 * @return  	 */	public abstract String reportToString(CharacterDistribution data1, CharacterDistribution data2, Tree theTree);		public abstract String reportToString(CharacterDistribution data1, CharacterDistribution data2, Tree theTree, String lineDelimiter, String columnDelimiter);}