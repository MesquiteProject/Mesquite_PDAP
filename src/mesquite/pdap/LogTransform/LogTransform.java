/* PDAP:PDTREE package for Mesquite  copyright 2001-2009 P. Midford & W. MaddisonPDAP:PDTREE is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.The web site for PDAP:PDTREE is http://mesquiteproject.org/pdap_mesquite/This source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html) */package mesquite.pdap.LogTransform;/*~~  */import mesquite.lib.*;import mesquite.lib.duties.*;import mesquite.lib.tree.AdjustableTree;/** ======================================================================== */public class LogTransform extends BranchLengthsAlterer {    /*.................................................................................................................*/    public boolean startJob(String arguments, Object condition, boolean hiredByName) {        return true;    }    /*.................................................................................................................*/    /**     * Real entry point for the transform - a wrapper around the recursive method doTransform     * @param tree the tree to transform     * @param resultString passed in, never filled          * @return returns true because this assumes the calling code is always responsible for notifying listeners of tree     */    public  boolean transformTree(AdjustableTree tree, MesquiteString resultString, boolean notify){        doTransform(tree, tree.getRoot());        //Debugg.println notify       return true;    }    /*.................................................................................................................*/    private void doTransform(AdjustableTree tree, int node) {        if (MesquiteDouble.isCombinable(tree.getBranchLength(node))){            if (tree.getBranchLength(node) >= 1) {                tree.setBranchLength(node,Math.log(tree.getBranchLength(node)), false);            }            else if (tree.getBranchLength(node) <= 0) {                tree.setBranchLength(node,MesquiteDouble. negInfinite,false);            }        }        for (int daughter=tree.firstDaughterOfNode(node); tree.nodeExists(daughter); daughter = tree.nextSisterOfNode(daughter)) {            doTransform(tree, daughter);        }    }    /*.................................................................................................................*/    public String getName() {        return "Natural Log Transform";    }    /*.................................................................................................................*/    public String getVersion() {        return "1.15";    }    /*.................................................................................................................*/    public boolean isPrerelease() {        return false;    }    /*................................................................................................................*/    public boolean isSubstantive(){        return true;    }            /*.................................................................................................................*/    public String getAuthors() {        return "Peter E. Midford, Ted Garland Jr., and Wayne P. Maddison";    }    /*.................................................................................................................*/    /** returns an explanation of what the module does.*/    public String getExplanation() {        return "Adjusts a tree's branch lengths to the natural log of its length" ;    }}